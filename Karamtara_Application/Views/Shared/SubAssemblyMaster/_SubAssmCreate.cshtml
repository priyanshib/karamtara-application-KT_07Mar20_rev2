@model Karamtara_Application.Models.SubAssemblyMasterModel

@using (Html.BeginForm("CreateSubAssembly", "SubAssemblyMaster", FormMethod.Post, new { @id = "SubAssemlyMasterForm" }))
{
    <div class="Catgdetails tableBlock">
        <div class="row">
            <table class="table m-0 mb-5" id="CreateSubAssemblyTable">
                <tr>
                    <th class="catNo">Cat. No</th>
                    <th class="productNm">Sub Assembly</th>
                    <th class="prodNo">Unit</th>
                    <th class="compoentNm">Component </th>
                    <th class="rawMater">Raw Material</th>
                    <th class="prodNo">Drawing No</th>
                    <th class="rawMater">Material Grade</th>
                    <th class="rawMater">Size</th>
                    <th class="prodNo">Quantity</th>
                    <th class="prodUnit"> Unit Gross Weight<br />(KG)</th>
                    <th class="prodUnit">Unit Net Weight<br />(KG)</th>
                </tr>
                <tr>
                    <td class="catNo">@Html.TextBox("SumAssmCatNo", null, new { @placeholder = "Catalogue No", @id = "SumAssmCatNo", @class = "ProdCatNum bold" })</td>
                    <td class="productNm">@Html.TextBox("SumAssmName", null, new { @placeholder = "Name", @id = "SumAssName", @class = "ProdName bold" })</td>
                    <td class="prodNo"><label id="unit" class="ProdName bold" name="unit"></label> <input type="hidden" id="unitId" name="unitId" /></td>
                    <td class="compoentNm"></td>
                    <td class="rawMater"></td>
                    <td class="prodNo">@Html.TextBox("DrawingNoMaster", null, new { @placeholder = "Drawing No", @id = "DrawingNoId", @class = "ProdName bold" })</td>
                    <td class="rawMater"></td>
                    <td class="rawMater"></td>
                    <td class="prodNo whiteBgInput"></td>
                    <td class="prodUnit"></td>
                    <td class="prodUnit"></td>

                </tr>
            </table>
            <div class="col-sm-12 text-right">
                <button type="button" class="submitBomBtn publishBtn" id="btnSaveSubAssm">save </button>
                <button type="button" class="addRowBtnYellow" id="AddRow">Add More Rows</button>
            </div>
        </div>
    </div>
}
<script>

            //var sourceArray = $.map(availableTags, function (item) {
        //    return { label: item.ComponentName, value: item.ComponentId }
        //});
    var sourceArray = [], obj = {};
    @foreach (var item in Model.ComponenetList)
    {
        @:sourceArray.push({ label: "@(item.ComponentName + " (" + item.CatalogueNo + ")")",name:"@item.ComponentName", value: @item.ComponentId});
    };
        @*JSON.parse('@Html.Raw(Json.Encode(Model.ComponenetList))');*@
    var data = [];

    @foreach (var item in Model.ComponenetList)
    {
            @:data.push({ ComponentId:@item.ComponentId, RawMaterial: "@item.RawMaterial", Size: "@item.Size", UnitGrWt: @item.UnitGrWt , UnitNetWt: @item.UnitNetWt, DrawingNo: "@item.DrawingNo", MaterialGrade: "@item.MaterialGrade", CatalogueNo:"@item.CatalogueNo" });
    };

    $("#btnSaveSubAssm").click(function () {

        var result = validation();

        if (!result) {
            ShowSnackBar('Add one component atleast');
            return false;
        }

        $('input[type=text]').each(function () {
            var getText = $(this).val() + '~!'; //here you can set your pattern superseded 88
            $(this).val(getText);
        });

        var form = $("#SubAssemlyMasterForm").serialize();
        $('input[type=text]').each(function () {
            $(this).val('');
        });

        $.ajax({
            type: 'POST',
            url: "/SubAssemblyMaster/CreateSubAssembly",
            data: form,
            dataType: 'json',
            success: function (data) {
                if (data > 0) {
                    createSuccess(data);
                }
                else {
                    createFailure();
                }
            },
            error: function (data) {
                console.log(data);
            },
            failure: function (data) {
                console.log(data);
            }
        });
    });

    $(document).ready(function () {
        //$(function () {
        //    $('.submitBomBtn').on("click", function () {
        //        $('input[type=text]').each(function () {
        //            var getText = $(this).val() + '~!'; //here you can set your pattern superseded 88
        //            $(this).val(getText);
        //        });
        //    });
        //});
        AddRows();
    });

    $("#AddRow").on('click', function () {
        AddRows();
    })

    function AddRows() {
        var lastIndex = $('#CreateSubAssemblyTable tr').length - 1;
        $.each(new Array(5), function (index) {
            var temp = lastIndex + index;
            $('#CreateSubAssemblyTable tr:last')
                .after('<tr><td class="catNo"><input type="text" name="CatNo" id="CatNo_' + temp + '" readonly="readonly"></td>' + '<td class="productNm"></td>' +
                    '<td class="prodNo"></label></td> <td class="componentNm">' +
                '<input type="text" name="CompName" class="CompName autocomp invalid whiteBgInput" id="compNameAuto_' + temp + '"  data-val="' + temp + '" > </td>'+
                  '<input type = "hidden" id = "componentId_' + temp + '" name = "ComponentId" > ' +
                '<td class="rawMater"> <input type="text" name="RM" id="RawMaterial_' + temp + '" readonly="readonly"></td>' +
                '<td class="rawMater"> <input type="text" name="DrawingNo" id="DrawingNo_' + temp + '" readonly="readonly" >' + '</td>' +
                '<td class="rawMater"> <input type="text" name="Grade" id="Grade_' + temp + '" readonly="readonly" >' + '</td>' +
                '<td class="rawMater"> <input type="text" name="Size" id="Size_' + temp + '" readonly="readonly" >' + '</td>' +
                    '<td class="prodNo"> <input type = "text" name = "Qty" id = "Quantity_' + temp + '" class="whiteBgInput"> </td> ' +
                    '<td class="prodUnit"> <input type="text" name="GrossWt" id="GrossWt_' + temp + '" readonly="readonly">' + '</td>' +
                '<td class="prodUnit"> <input type="text" name="NetWt" id="NetWt_' + temp + '" readonly="readonly">' + '</td>');
        });
        AutoComp();
    };

    function AutoComp() {

        //var sourceArray = $.map(availableTags, function (item) {
        //    return { label: item.ComponentName, value: item.ComponentId }
        //});

        $(".autocomp").autocomplete({
            minlength: 0,
            source: sourceArray,
            select: function (event, ui) {
                var dataAttrib = $(this).attr('data-val');
                var subId = ui.item.value;
                $(this).val(ui.item.name);
                AutoFillSelectedRow(dataAttrib, subId);
                $(this).removeClass('invalid');
                return false;
            },
            change: function (event, ui) {
                if (ui.item == null) {
                    $(this).val("");
                    $(this).focus();
                    var dataAttrib = $(this).attr('data-val');
                    ClearRow(dataAttrib);
                }
            },
            create: function () {
                $(this).data("ui-autocomplete")._renderItem = function (ul, item) {
                    return $("<li>")
                        .append("<div>" + item.label + "<span class='float-right'><img src='../Assets/images/4.png' width='20px'></span></div>")
                        .appendTo(ul);
                };
            }}).focus(function () {
            $(this).autocomplete("search", "");
        });

        function AutoFillSelectedRow(num, subId) {
            //var data = JSON.parse('@Html.Raw(Json.Encode(Model.ComponenetList))');
            debugger;
            let obj = data.find(x => x.ComponentId == subId);
            $("#RawMaterial_" + num).val(obj.RawMaterial);
            $("#CatNo_" + num).val(obj.CatalogueNo);
            $("#Size_" + num).val(obj.Size);
            $("#GrossWt_" + num).val(obj.UnitGrWt.toFixed(3));
            $("#NetWt_" + num).val(obj.UnitNetWt.toFixed(3));
            $("#componentId_" + num).val(subId);
            $("#DrawingNo_" + num).val(obj.DrawingNo);
            $("#Grade_" + num).val(obj.MaterialGrade);
        };

        function ClearRow(num) {
            $("#CatNo_" + num).val("");
            $("#RawMaterial_" + num).val("");
            $("#Size_" + num).val("");
            $("#GrossWt_" + num).val("");
            $("#NetWt_" + num).val("");
            $("#componentId_" + num).val("");
            $("#DrawingNo_" + num).val("");
            $("#MaterialGrade_" + num).val("");
        };
    }

    function validation() {
        var length = $('#CreateSubAssemblyTable tr').length - 1;
        var count = 0;

        for (let i = 1; i < length; i++) {
            if ($("#compNameAuto_" + i).val()) {
                count = count + 1;
            }
        }

        if (count > 0)
            return true;
        else
            return false;
    }

</script>