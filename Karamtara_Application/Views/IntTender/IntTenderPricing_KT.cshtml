@model Karamtara_Application.Models.Tender.TenderDetailsModel
@using Karamtara_Application.Models.Tender
@{
    ViewBag.Title = "TenderDetails";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
@{
    int colCount = 0;
    if (Model.LineList != null && Model.LineList.Count > 0)
    {
        colCount = Model.LineList.Count;
    }
    TenderLineValues lineValues = new TenderLineValues();
    decimal lineValue = 0;
    decimal margin = 0;
    decimal sCostExWorks = 0;
    bool isRevisionCreated = TempData["IsRevisionCreated"] == null ? false : (bool)TempData["IsRevisionCreated"];
    List<dynamic> otherCurrencies = Model.CurrencyList.Where(x => x.DisplayInView == true).ToList<dynamic>();
}
<div class="main-content mainContentPaddingBtm">
    <input type="hidden" value="@Model.EnquiryId" id="hidEnqId" name="enquiryId" />
    <input type="hidden" id="bomId" value="@Model.BomId" />
    <input type="hidden" id="revisionId" value="@Model.RevisionNo" />
    <input type="hidden" id="tndId" value="@Model.TenderId" />
    <input type="hidden" id="tndRevId" value="@Model.TenderRevisionNo" />
    <input type="hidden" id="tndUnitCost" value="@Model.UnitCost" />
    <input class="finalWeighttMt" id="finalWeighttMt" type="hidden" />

    @Html.HiddenFor(x => x.IsEdit, new { @id = "isPageEditable" })
    @Html.Hidden("totalCostINR", "5011009", new { @id = "totalCostINR" })

    <div class="row">
        <div class="col-sm-12 ">
            <div class="row prjNmBlock">
                <div class="col-sm-8 align-self-center">
                    <span>Project :</span>@Model.ProjectName
                </div>
                <div class="col-sm-4 text-right ">
                    <button type="button" id="btnEditBom" class="createBomBtn buttonContainer saveBtn">Add Wastage</button>
                    <button type="button" id="btnSubmit" class="createBomBtn buttonContainer saveBtn">SAVE</button>
                    <button type="button" class="createBomBtn buttonContainer publishBtn" id="btnPublish">Publish</button>
                    <button type="button" class="createBomBtn publishBtn" id="btnCancelRev" style="display:@(isRevisionCreated == true ? "inline-block" : "none")">Cancel</button>
                </div>
            </div>
        </div>
        <div class="col-sm-12">
            <div class="row AddOptnDtl">
                <div class="AddOptn col-sm-0 pr-3 p-0" data-toggle="modal" data-target="#PortModel" onclick="loadForm(this)">
                    <img src="../../Assets/images/plusIcon.png" />ASSIGN PORT
                </div>
                <div class="AddOptn col-sm-0 pr-3 p-0" data-toggle="modal" data-target="#CurrencyModel" onclick="loadForm(this)">
                    <img src="../../Assets/images/plusIcon.png" />CURRENCY
                </div>
                <div class="AddOptn  col-sm-0 pr-3 p-0" data-toggle="modal" data-target="#RMModel" onclick="loadForm(this)">
                    <img src="../../Assets/images/plusIcon.png" />RAW MATERIAL PRICE
                </div>
                <div class="AddOptn col-sm-0 pr-3 p-0" data-toggle="modal" data-target="#BankGtyModel" onclick="loadForm(this)">
                    <img src="../../Assets/images/plusIcon.png" />BANK GUARANTEE
                </div>
                <div class="AddOptn col-sm-0 pr-3 p-0" data-toggle="modal" data-target="#markupModel" onclick="loadForm(this)">
                    <img src="../../Assets/images/plusIcon.png" />ADD MARKUP
                </div>
                <div class="AddOptn col-sm-0 pr-3 p-0" data-toggle="modal" data-target="#FrghtChargModel" onclick="loadForm(this)">
                    <img src="../../Assets/images/plusIcon.png" />FREIGHT CHARGES
                </div>

                <div class="AddOptn col-sm-0 pr-3 p-0" data-toggle="modal" data-target="#TPriceModal" onclick="loadForm(this)">
                    <img src="../../Assets/images/plusIcon.png" />ADD TEST PRICE
                </div>
                <div class="AddOptn col-sm-0 pr-3 p-0" data-toggle="modal" data-target="#auditTrial" onclick="loadForm(this)">
                    <img src="../../Assets/images/plusIcon.png" />AUDIT TRIAL
                </div>
                <div class="AddOptn col-sm-0 pr-3 p-0" data-toggle="modal" data-target="#ReportModel" onclick="loadForm(this)">
                    <img src="../../Assets/images/plusIcon.png" />REPORT
                </div>
                <div class="AddOptn col-sm-0 p-0  pr-3" data-toggle="modal" data-target="#TextModel" onclick="loadForm(this)">
                    <img src="../../Assets/images/plusIcon.png" />ADD TEXT
                </div>
            </div>
        </div>

        <div class="TenderDtlTable tableBlock tablePrctender">

            <table class="table tableLayout">
                <tr class="rowHeadings">
                    <th class="TendSrNoDtl">Sr. No</th>
                    <th class="Tenddesc">Description</th>
                    <th class="TendBulb"></th>
                    <th class="TendDrawNo">Drawing No</th>
                    <th class="TendUnit">UOM</th>
                    <th class="TendQty">Quantity</th>
                    @foreach (var item in Model.TndPortDetails)
                    {
                        <th class="TendUnitPrice exclude">Unit Price @item.PortName</th>
                    }
                    <th class="TendUnitWt exclude">Unit Wt.</th>
                    <th class="TendIndCost">India Cost</th>
                    <th class="TendTotCost">Total India Cost</th>
                    <th class="TendBO exclude">BO</th>
                    <th class="TendSalesCost">Cost of Sales</th>
                    <th class="TendSellPriceINR">Selling Price (Exworks)</th>
                    @*<th class="TendSellPriceUSD">Selling Price (Exworks)</th>
                        <th class="TendSellPriceEURO">Selling Price (Exworks)</th>*@
                    @if (otherCurrencies != null && otherCurrencies.Any())
                    {
                        foreach (var currency in otherCurrencies)
                        {
                            <th class="@("TendSellPrice" + currency.Name.ToUpper()) SellPrice">Selling Price (Exworks)</th>
                        }
                    }
                </tr>

                <tr class="rowHeadings">
                    <td class="TendSrNoDtl"></td>
                    <td class="Tenddesc"></td>
                    <td class="TendBulb"></td>
                    <td class="TendDrawNo"></td>
                    <td class="TendUnit"></td>
                    <td class="TendQty"></td>
                    @foreach (var item in Model.TndPortDetails)
                    {
                        <td class="TendUnitPrice exclude">@item.CurrencyName</td>
                    }
                    <td class="TendUnitWt exclude">KG</td>
                    <td class="TendIndCost">INR</td>
                    <td class="TendTotCost exclude">INR</td>
                    <td class="TendBO exclude">EURO</td>
                    <td class="TendSalesCost exclude">INR</td>
                    <td class="TendSellPriceINR exclude">INR</td>
                    @*<td class="TendSellPriceUSD exclude">USD</td>
                        <td class="TendSellPriceEURO exclude">EURO</td>*@
                    @if (otherCurrencies != null && otherCurrencies.Any())
                    {
                        foreach (var currency in otherCurrencies)
                        {
                            <td class="@("TendSellPrice" + currency.Name.ToUpper()) SellPrice exclude">@currency.Name.ToUpper()</td>
                        }
                    }
                </tr>



                @if (Model.MasterList != null && Model.MasterList.Count > 0)
                {
                    foreach (var data in Model.MasterList)
                    {
                        if (data.IsRelated)
                        {
                            <tr class="rowHeadings">
                                <td class="TendSrNoDtl">@data.SrNo</td>
                                <td class="Tenddesc">@data.Name</td>
                                <td class="TendBulb"></td>
                                <td class="TendDrawNo"></td>
                                <td class="TendUnit"></td>
                                <td class="TendQty"></td>
                                @if (Model.TndPortDetails.Count > 0)
                                {
                                    <td class="TendUnitPrice exclude" colspan="@Model.TndPortDetails.Count"></td>
                                }
                                <td class="TendUnitWt exclude"></td>
                                <td class="TendIndCost"></td>
                                <td class="TendTotCost exclude"></td>
                                <td class="TendBO exclude"></td>
                                <td class="TendSalesCost exclude"></td>
                                <td class="TendSellPriceINR exclude"></td>
                                @*<td class="TendSellPriceUSD exclude"></td>
                                    <td class="TendSellPriceEURO exclude"></td>*@
                                @if (otherCurrencies != null && otherCurrencies.Any())
                                {
                                    foreach (var currency in otherCurrencies)
                                    {
                                        <td class="@("TendSellPrice" + currency.Name.ToUpper()) SellPrice exclude"></td>
                                    }
                                }
                            </tr>
                        }
                        else if (data.IsDirectChild)
                        {
                            <tr>

                                <td scope="col" class="TendSrNoDtl"></td>
                                <td scope="col" class="Tenddesc">@data.Name</td>
                                <td class="TendBulb"><img src="../Assets/images/bulb.png" id="bulbElement" onclick="OpenTestLine(this, @Model.BomId, @Model.RevisionNo, @Model.TenderId, @Model.TenderRevisionNo, @data.PrimaryId, @data.Type);"></td>
                                <td class="TendDrawNo">@data.DrawingNo</td>
                                <td class="TendUnit">@data.Unit</td>
                                @{
                                    decimal value = 0;
                                    decimal boVal = 0;
                                    if (Model.IntTndQtyList != null && Model.IntTndQtyList.Any())
                                    {
                                        dynamic dynamic = Model.IntTndQtyList.Where(x => x.PrimaryId == data.PrimaryId && x.TypeId == data.Type).FirstOrDefault();

                                        if (dynamic != null)
                                        {
                                            value = dynamic.Quantity;
                                            boVal = dynamic.BO;
                                        }
                                    }
                                }
                                <td class="TendQty">
                                    <input id="TndQuantity" type="number" ProductGroupId="@data.ProductGroupId" AssemblyId="@data.AssemblyId" SubAssemblyId="@data.SubAssemblyId"
                                           ComponentId="@data.ComponentId" TypeId="@data.Type" PrimaryId="@data.PrimaryId" value="@value" fieldtype="Qty" onfocus="pushDetails(this)" onblur="editQtyDetails(this)"
                                           class="whiteBgInput p-1" />
                                </td>
                                @foreach (var item in Model.TndPortDetails)
                                {
                                    <td class="TendUnitPrice" portid="@item.Id" currencyname="@item.CurrencyName" currencyvalue="@item.CurrencyValue"></td>
                                }
                                <td class="TendUnitWt">@Math.Round(data.TotalUnitNetWt, 3)</td>
                                <td class="TendIndCost">@Math.Round(data.UnitCost, 3)</td>
                                <td class="TendTotCost"></td>
                                <td class="TendBO">
                                    <input id="TndBOQty" type="number" ProductGroupId="@data.ProductGroupId" AssemblyId="@data.AssemblyId" SubAssemblyId="@data.SubAssemblyId"
                                           ComponentId="@data.ComponentId" TypeId="@data.Type" PrimaryId="@data.PrimaryId" fieldtype="BO" value="@boVal" onfocus="pushDetails(this)" onblur="editQtyDetails(this)"
                                           class="whiteBgInput p-1" />
                                </td>
                                <td class="TendSalesCost"></td>
                                <td class="TendSellPriceINR"></td>
                                @*<td class="TendSellPriceUSD"></td>
                                    <td class="TendSellPriceEURO"></td>*@
                                @if (otherCurrencies != null && otherCurrencies.Any())
                                {
                                    foreach (var currency in otherCurrencies)
                                    {
                                        <td class="@("TendSellPrice" + currency.Name.ToUpper()) SellPrice"></td>
                                    }
                                }
                            </tr>
                        }
                    }
                }
                <tr class="totalWtRow">
                    <td class="TendSrNoDtl"></td>
                    <td class="Tenddesc" colspan="5">Total</td>
                    @*<td class="TendBulb"></td>
                        <td class="TendDrawNo"></td>
                        <td class="TendUnit"></td>
                        <td class="TendTotQty"></td>*@
                    @foreach (var item in Model.TndPortDetails)
                    {
                        <td class="TendTotUnitPrice exclude" portid="@item.Id"></td>
                    }
                    <td class="TendTotUnitWt exclude"></td>
                    <td class="TendTotIndCost"></td>
                    <td class="TendTotalTotCost exclude"></td>
                    <td class="TendTotBO exclude"></td>
                    <td class="TendTotSalesCost exclude"></td>
                    <td class="TendTotSellPriceINR exclude"></td>
                    @*<td class="TendTotSellPriceUSD exclude"></td>
                        <td class="TendTotSellPriceEURO exclude"></td>*@
                    @if (otherCurrencies != null && otherCurrencies.Any())
                    {
                        foreach (var currency in otherCurrencies)
                        {
                            <td class="@("TendTotSellPrice" + currency.Name.ToUpper()) SellPrice exclude"></td>
                        }
                    }

                </tr>
                <tr class="totalWtINRRow">
                    <td class="TendSrNoDtl"></td>
                    <td class="Tenddesc" colspan="5">Total (RS)</td>
                    @foreach (var item in Model.TndPortDetails)
                    {
                        <td class="TendTotUnitPrice exclude" portid="@item.Id"></td>
                    }
                    <td class="TendTotUnitWt exclude"></td>
                    <td class="TendTotIndCost"></td>
                    <td class="TendTotalTotCost exclude"></td>
                    <td class="TendTotBO exclude"></td>
                    <td class="TendTotSalesCost exclude"></td>
                    <td class="TendTotSellPriceINR exclude"></td>
                    @*<td class="TendTotSellPriceRs exclude"></td>*@
                    @*<td class="TendTotSellPriceEURORs exclude"></td>*@
                    @if (otherCurrencies != null && otherCurrencies.Any())
                    {
                        foreach (var currency in otherCurrencies)
                        {
                            <td class="@("TendTotSellPrice" + currency.Name.ToUpper() + "Rs ")exclude"></td>
                        }
                    }
                </tr>
                <tr class="totalWtCrRow">
                    <td class="TendSrNoDtl"></td>
                    <td class="Tenddesc" colspan="5">Total (Cr.)</td>
                    @foreach (var item in Model.TndPortDetails)
                    {
                        <td class="TendTotUnitPrice exclude" portid="@item.Id"></td>
                    }
                    <td class="TendTotUnitWt exclude"></td>
                    <td class="TendTotIndCost"></td>
                    <td class="TendTotalTotCost exclude"></td>
                    <td class="TendTotBO exclude"></td>
                    <td class="TendTotSalesCost exclude"></td>
                    <td class="TendTotSellPriceINR exclude"></td>
                    @*<td class="TendTotSellPriceCr exclude"></td>*@
                    @*<td class="TendTotSellPriceEUROCr exclude"></td>*@
                    @if (otherCurrencies != null && otherCurrencies.Any())
                    {
                        foreach (var currency in otherCurrencies)
                        {
                            <td class="@("TendTotSellPrice" + currency.Name.ToUpper() + "Cr ")exclude"></td>
                        }
                    }
                </tr>
            </table>

        </div>

    </div>
</div>

<!-- Modal for Currency -->
<div class="modal fade" id="CurrencyModel" tabindex="-1" role="dialog" aria-hidden="true" data-backdrop="static">
    <div class="modal-dialog modal-dialog-centered " role="document">
        <div class="modal-content" id="PricingModels">
            <div class="modal-body">

            </div>
        </div>
    </div>
</div>


<!-- Modal for Report -->
<div class="modal fade" id="ReportModel" tabindex="-1" role="dialog" aria-hidden="true" data-backdrop="static">
    <div class="modal-dialog modal-dialog-centered " role="document">
        <div class="modal-content" id="PricingModels">
            <div class="modal-body">
            </div>
        </div>
    </div>
</div>

<!-- Modal for Raw Material -->
<div class="modal fade" id="RMModel" tabindex="-1" role="dialog" aria-hidden="true" data-backdrop="static">
    <div class="modal-dialog modal-dialog-centered " role="document">
        <div class="modal-content" id="PricingModels">
            <div class="modal-body">
            </div>
        </div>
    </div>
</div>

<!-- Modal for Bank Guarantee -->
<div class="modal fade" id="BankGtyModel" tabindex="-1" role="dialog" aria-hidden="true" data-backdrop="static">
    <div class="modal-dialog modal-dialog-centered " role="document">
        <div class="modal-content">
            <div class="modal-body">
            </div>
        </div>
    </div>
</div>

<!-- Modal for Add marks Up -->
<div class="modal fade" id="markupModel" tabindex="-1" role="dialog" aria-hidden="true" data-backdrop="static">
    <div class="modal-dialog modal-dialog-centered " role="document" style="max-width:80%">
        <div class="modal-content">
            <div class="modal-body">

            </div>
        </div>
    </div>
</div>

<!-- Modal for Freight charges -->
<div class="modal fade" id="FrghtChargModel1" tabindex="-1" role="dialog" aria-hidden="true" data-backdrop="static">
    <div class="modal-dialog modal-dialog-centered " role="document">
        <div class="modal-content">
            <div class="modal-body">

            </div>
        </div>
    </div>
</div>

<!-- Modal for Freight distrubution -->
<div class="modal fade" id="FrghtChargModel" tabindex="-1" role="dialog" aria-hidden="true" data-backdrop="static">
    <div class="modal-dialog modal-dialog-centered " role="document" style="max-width:60%">
        <div class="modal-content">
            <div class="closeMenu" data-dismiss="modal" aria-label="Close">
                <button type="button" class="close" id="xbtn">
                    <span aria-hidden="true">×</span>
                </button>
            </div>
            <div class=" modal-body overflowModel" style="overflow:hidden">
            </div>
        </div>
    </div>
</div>

<!-- Modal for Add Final Price -->
<div class="modal fade" id="FinalPrcModel" tabindex="-1" role="dialog" aria-hidden="true" data-backdrop="static">
    <div class="modal-dialog modal-dialog-centered " role="document" style="max-width:60%">
        <div class="modal-content">
            <div class="modal-body">
            </div>
        </div>
    </div>
</div>

<!-- Modal for Audit Trial -->
<div class="modal fade" id="auditTrial" tabindex="-1" role="dialog" aria-hidden="true" data-backdrop="static">
    <div class="modal-dialog modal-dialog-centered " role="document">
        <div class="modal-content">
            <div class="modal-body">

            </div>
        </div>
    </div>
</div>

<!-- Modal for Add Test Charges -->
<div class="modal fade" id="TestChgModel" tabindex="-1" role="dialog" aria-hidden="true" data-backdrop="static">
    <div class="modal-dialog modal-dialog-centered " role="document">
        <div class="modal-content">
            <div class="modal-body">
                <div class="BomRefDtls">
                    <div class="closeMenu">
                        <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                            <span aria-hidden="true">×</span>
                        </button>
                    </div>
                    <div class="col-sm-12 row  m-0 BomRefHeader">
                        <div class="col-sm-5 align-self-center">
                            ADD TEST CHARGES
                        </div>
                        <div class="col-sm-7 text-right">
                            <button type="button" class="submitEnq revisionBtn">Cancel</button>
                            <button type="button" class="submitEnq publishBtn">Submit</button>
                        </div>
                    </div>
                    <div class="tableBlock TenderDtlModelTable addTestChargModel">
                        <table class="table m-0 ">
                            <tr>
                                <th class="markSrNo">Sr.No</th>
                                <th class="descTest">Description</th>
                                <th class="uomTest">UOM</th>
                                <th class="testCharg">Test Charges</th>
                                <th class="overCharg">Override Charges</th>
                            </tr>
                            <tr class="otherTotalBlock">
                                <td colspan="5" class="descTest">HW FITINGS: 220kv zebra conductor</td>
                            </tr>
                            <tr>
                                <td class="markSrNo">1</td>
                                <td class="descTest">Double Suspension</td>
                                <td class="uomTest">Set</td>
                                <td class="testCharg">3280</td>
                                <td class="overCharg"><input type="text" /></td>
                            </tr>
                            <tr>
                                <td class="SrNoDtl">2</td>
                                <td class="descTest">Single Tension</td>
                                <td class="uomTest">Set</td>
                                <td class="testCharg">3280</td>
                                <td class="overCharg"><input type="text" /></td>
                            </tr>
                            <tr class="subTotalTR">
                                <td class="markSrNo"></td>
                                <td class="descTest"></td>
                                <td class="uomTest">Sub-Total</td>
                                <td class="testCharg">6572</td>
                                <td class="overCharg"><input type="text" /></td>
                            </tr>
                            <tr class="otherTotalBlock">
                                <td colspan="5" class="descTest">HW FITINGS: 220kv zebra conductor</td>
                            </tr>
                            <tr>
                                <td class="markSrNo">1</td>
                                <td class="descTest">Double Suspension</td>
                                <td class="uomTest">Set</td>
                                <td class="testCharg">3280</td>
                                <td class="overCharg"><input type="text" /></td>
                            </tr>
                            <tr>
                                <td class="markSrNo">2</td>
                                <td class="descTest">Single Tension</td>
                                <td class="uomTest">Set</td>
                                <td class="testCharg">3280</td>
                                <td class="overCharg"><input type="text" /></td>
                            </tr>
                            <tr class="subTotalTR">
                                <td class="markSrNo"></td>
                                <td class="descTest"></td>
                                <td class="uomTest">Sub-Total</td>
                                <td class="testCharg">6572</td>
                                <td class="overCharg"><input type="text" /></td>
                            </tr>

                        </table>
                    </div>
                    <div class="tableBlock frghtChargBlk">
                        <table class="table m-0">
                            <tr class="bgBlue">
                                <td class="markSrNo"></td>
                                <td class="descTest"></td>
                                <td class="uomTest" colspan="2">Total Test Charges</td>
                                <td class="testCharg">6572</td>
                            </tr>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
<!-- Modal for Test Prices -->
<div class="modal fade TPriceModal" id="TPriceModal" tabindex="-1" role="dialog" aria-hidden="true" data-backdrop="static">
    <div class="modal-dialog modal-dialog-centered fullscreenModal" role="document">
        <div class="modal-content" id="PricingModels">
            <div class="modal-body">
            </div>
        </div>
    </div>
</div>

<div class="modal fade" id="successModel" tabindex="-1" role="dialog" aria-hidden="true" data-backdrop="static">
    <div class="modal-dialog modal-dialog-centered" role="document">
        <div class="modal-content">
            <div class="modal-header modelHeader">
                <span class="modal-title modalMsgTitle" id="modalTitle"></span>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <label id="modalBody" class="lableMsg">  </label>
            </div>
            <div class="modal-footer">
                <button type="button" class="submitBomBtn publishBtn" id="modalOkButton" onclick="closeModal()">OK</button>
                @*<button type="button" class="submitBomBtn publishBtn" style="display:none;" id="modalCancelButton" onclick="refreshList()">cancel</button>*@<button type="button" class="submitBomBtn publishBtn" style="display:none;" id="modalCancelButton" onclick="refreshList()"></button>
            </div>
        </div>
    </div>
</div>

<div class="modal fade" id="testmasterDtls" tabindex="-1" role="dialog" aria-hidden="true" data-backdrop="static">

</div>

<!--Model for assigning Port-->
<div class="modal fade" id="PortModel" tabindex="-1" role="dialog" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered " role="document">
        <div class="modal-content" id="PricingModels">
            <div class="closeMenu">
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">×</span>
                </button>
            </div>
            <div class="modal-body ">

            </div>

        </div>
    </div>
</div>

<!--Model for adding text-->
<div class="modal fade" id="TextModel" tabindex="-1" role="dialog" aria-hidden="true" data-backdrop="static">
    <div class="modal-dialog modal-dialog-centered " role="document">
        <div class="modal-content" id="PricingModels">
            <div class="modal-body">

            </div>
        </div>
    </div>
</div>

<div id="snackbar"></div>

<script type="text/javascript">
    var isControlChanged = false, qtyDetails = [], lineGrWt = [], tndQtyDetails = [],tndPorts = [],currencyList= @Html.Raw(Json.Encode(Model.CurrencyList))
        portFrtDetails= @Html.Raw(Json.Encode(Model.TndPortFrtDetails)),inttndValues=@Html.Raw(Json.Encode(Model.IntTndValues)),
        tndMarkupDetails = @Html.Raw(Json.Encode(Model.TndMarkupDetails)),intTndPortName = @Html.Raw(Json.Encode(Model.TndPortDetails)), tenderRevlist =  @Html.Raw(Json.Encode(Model.RevList)),
        intTenderType = @Model.TenderType, otherCurrencies =@Html.Raw(Json.Encode(otherCurrencies));

    $("#btnEditBom").click(function () {
        window.location.href = "/bomrevision/editbom?enqId=" + $("#hidEnqId").val() + "&bomId=" + $("#bomId").val() + '&revNo=' + $("#revisionId").val();
    })

    $(document).ready(function () {
        @foreach (var item in Model.TndPortDetails)
        {
            @:tndPorts.push({PortId:"@item.Id",PortName:"@item.PortName"});
        }
        $('.modal').on('show.bs.modal', function (e) {
            if (isControlChanged) {
                ShowSnackBar("Please save changes before proceeding further");
                return e.preventDefault();
            }
            else
                return true;
        });
        if ($("#isPageEditable").val() != "True" && $("#isPageEditable").val() != "true") {
            $("input").attr('readonly', true);
            $("input").removeClass("whiteBgInput");
            $("input").removeClass("p-1");
            $(".buttonContainer").hide();
            $("button").hide();
            $("input[type='button']").hide();
        }
        SetTotalUnitWt();
        SetTotalindCost();
    });

    function successTestLineSave() {
        var x = document.getElementById("snackbar");
        x.innerHTML = "Relation for Test and Lines update successfully";
        x.className = "snackBarshow";
        setTimeout(function () { x.className = x.className.replace("snackBarshow", ""); }, 3000);
    };

    function failedTestLineSave() {
        var x = document.getElementById("snackbar")
        x.innerHTML = "Failed while saving changes. Please try again";
        x.className = "snackBarshow";
        setTimeout(function () { x.className = x.className.replace("snackBarshow", ""); }, 5000);
    };

    function loadForm(element) {
        //alert(2);
        var url = "/IntTenderPricingKT/";
        var type = $(element).attr("data-target");
        if (isControlChanged) {
            ShowSnackBar("Please save changes before proceeding further");
            return false;
        }
        //alert(3);
        isControlChanged = false;
        if (type == "#RMModel") {
            url = url + "loadRMPricing?tndId=" + $("#tndId").val() + '&tndRevNo=' + $("#tndRevId").val();
        }
        else if (type == "#markupModel") {
            url = "/IntTenderPricingKT/loadMarkupPricing?tndId=" + $("#tndId").val() + '&tndRevNo=' + $("#tndRevId").val();
        }
        else if (type == "#FrghtChargModel") {
            url = "/IntTenderPricingKT/loadFreightCharges?tndId=" + $("#tndId").val() + '&tndRevNo=' + $("#tndRevId").val();
        }
        else if (type == "#BankGtyModel") {
            url = url + "GetBGData?tndId=" + $("#tndId").val() + '&tndRevNo=' + $("#tndRevId").val();
        }
        else if (type == "#TPriceModal") {
            url = "/IntTenderPricing/LoadTestPricing?tndId=" + $("#tndId").val() + "&tndRevNo=" + $("#tndRevId").val();
        }
        else if (type == "#FinalPrcModel") {
            url = url + "GetFinalPrices?tndId=" + $("#tndId").val() + '&tndRevNo=' + $("#tndRevId").val();
        }
        else if (type == "#auditTrial") {
            url = url + "GetAuditTrial?tndId=" + $("#tndId").val();
        }
        else if (type == "#ReportModel") {
            url = "/report/ProductGrpTonnage?tndId=" + $("#tndId").val() + '&tndRevNo=' + $("#tndRevId").val();
        }
        else if (type == "#CurrencyModel") {
            url = "/IntTenderPricing/LoadCurrency?tndId=" + $("#tndId").val() + '&tndRevNo=' + $("#tndRevId").val() + '&tndType=' + intTenderType;
        }
        else if (type == "#PortModel") {
            url = url + "LoadAssignPort?tndId=" + $("#tndId").val() + '&tndRevNo=' + $("#tndRevId").val();
        }
        else if (type == "#TextModel") {
            url = url + "LoadTextDetails?tndId=" + $("#tndId").val() + '&tndRevNo=' + $("#tndRevId").val();
        }
        $.ajax({
            type: "post",
            url: url,
            dataType: "html",
            contentType: "application/x-www-form-urlencoded;charset=utf-8",
            success: function (data) {
                $(type).find(".modal-body").html(data);
            },
            error: function (courses) { }
        });
    }

    function successModal() {
        $("#modalOkButton").html("OK");
        $('#modalTitle').html('Success');
        $('#modalBody').html('Record updated Successfully');
        $("#successModel").modal('show');
    }

    function failureModal() {
        $("#modalOkButton").html("OK");
        $('#modalTitle').html('Success');
        $('#modalBody').html('Record updation failed');
        $("#successModel").modal('show');
    }

    function editQtyDetails(element) {
        var primaryId = $(element).attr("primaryid");
        var fieldType = $(element).attr("fieldtype");
        var typeId = $(element).attr("typeid");
        var index = tndQtyDetails.findIndex(x => x.PrimaryId == primaryId && x.FieldType == fieldType && x.TypeId == typeId);
        if (index != -1) {
            tndQtyDetails[index].Value = $(element).val();
        }
        SetTotalUnitWt();
        SetTotalindCost();
        isControlChanged = true;
    }

    function pushDetails(element) {
        var obj = {};
        var primaryId = $(element).attr("primaryid");
        var fieldType = $(element).attr("fieldtype");
        var typeId = $(element).attr("typeid");
        var index = tndQtyDetails.findIndex(x => x.PrimaryId == primaryId && x.FieldType == fieldType && x.TypeId == typeId);
        if (index != -1) {
            tndQtyDetails[index].Value = $(element).val();
        }
        else {
            obj.PrimaryId = primaryId;
            obj.Value = $(element).val();
            obj.FieldType = fieldType;
            obj.TypeId = typeId;
            tndQtyDetails.push(obj);
            obj = {};
        }

    }

    function randomId() {
        var S4 = function () {
            return (((1 + Math.random()) * 0x10000) | 0).toString(16).substring(1);
        };
        return (S4() + S4() + "-" + S4() + "-" + S4() + "-" + S4() + "-" + S4() + S4() + S4());
    }

    function closeModal() {
        $(".modal").modal('hide');
        $("#successModel").modal('hide');
    }

    function setCosts() {
        var unitCost = 0, salesCost = 0, exWorks = 0, salesCostArr = [], exWorksArr = [], lineUnitCost = 0, lineUnitCostArr = [];
        $('.TenderDtlTable table').find('td.calcUnitCost').each(function (index, item) {
            unitCost += Number($(item).text());
        });

        $(qtyDetails).each(function (index, item) {
            $('.TenderDtlTable table').find('td.salesCost[lineid="' + item.LineId + '"]').not(".excludeItem").each(function (index, item) {
                salesCost += Number($(item).text());
            });

            $('.TenderDtlTable table').find('td.sCostExWorks[lineid="' + item.LineId + '"]').not(".excludeItem").each(function (index, item) {
                exWorks += Number($(item).text());
            });

            $('.TenderDtlTable table').find('td.lineUnitCost[lineid="' + item.LineId + '"]').not(".excludeItem").each(function (index, item) {
                lineUnitCost += Number($(item).text());
            });

            salesCostArr.push({ lineId: item.LineId, value: salesCost });
            exWorksArr.push({ lineId: item.LineId, value: exWorks });
            lineUnitCostArr.push({ lineId: item.LineId, value: lineUnitCost });

            $(".totalWtRow").find('td.salesCost[lineid="' + item.LineId + '"]').text(salesCost.toFixed(3));
            $(".totalWtRow").find('td.sCostExWorks[lineid="' + item.LineId + '"]').text(exWorks.toFixed(3));
            $(".totalWtRow").find('td.lineUnitCost[lineid="' + item.LineId + '"]').text(lineUnitCost.toFixed(3));
            salesCost = 0;
            exWorks = 0;
            lineUnitCost = 0;
        });
        var tndNo = $("#tndId").val();
        var tndRevNo = $("#tndRevId").val();
        $.ajax({
            type: "POST",
            url: '/TenderPricing/SaveCosts',
            dataType: "JSON",
            data: { unitCost: unitCost, tndNo: tndNo, tndRevNo: tndRevNo, salesCost: JSON.stringify(salesCostArr), exWorks: JSON.stringify(exWorksArr), lineUnitCost: JSON.stringify(lineUnitCostArr) },
            success: function (data) {
            },
            error: function (data) { }
        });
    }

    function OpenTestLine(e, bomId, revNo, tenId, tenRevId, primaryId, typeId) {

        var model = { BomId: bomId, RevId: revNo, TenderId: tenId, TenderRevisionId: tenRevId, PrimaryId: primaryId, ProdType: typeId };

        $.ajax({
            type: 'POST',
            url: "/TenderPricing/GetTestLineRelation",
            data: JSON.stringify(model),
            dataType: 'html',
            contentType: "application/json",
            success: function (data) {
                //$(".colorClass").each(function () {
                //    $(this).removeAttr('style');
                //});
                //$(e).attr('style', 'background-color:#e8e8e8;');
                $("#testmasterDtls").html(data);
                $("#testmasterDtls").modal('show');
            },
            error: function (err) {
            }
        });
    }

    function SetTotalUnitWt() {
        var wt, totalWt = 0, qty = 0, intWeightMT, pckPercentage =0;
        $('.TenderDtlTable table').find('td.TendUnitWt').not(".exclude").each(function (index, item) {
            parentItem = $(item).parent();
            wt = Number($(item).text());
            qty = Number($(parentItem).find("#TndQuantity").val());
            value = wt * qty;

            if (isNaN(value) || value == "")
                value = 0;

            totalWt += value;
        });
        $(".totalWtRow").find('td.TendTotUnitWt').text(totalWt.toFixed(3));
        var object = inttndValues.filter((x) => x.Description == "PackingPercentage");
        if (object.length > 0) {
            pckPercentage = Number(object[0].Value);
        }

        intWeightMT = Number(((totalWt * pckPercentage) / 1000).toFixed(3));

        $("#finalWeighttMt").val(intWeightMT);

        $(".totalWtINRRow").find(".TendTotUnitWt").text(intWeightMT + " MT");
    }

    function SetTotalindCost() {
        var elements, qty, cost, totalCost = 0, value, parentItem;
        SetTotalBO();

        $('.TenderDtlTable table').find('td.TendTotCost').not(".exclude").each(function (index, item) {
            parentItem = $(item).parent();
            cost = Number($(parentItem).find(".TendIndCost").text());
            qty = Number($(parentItem).find("#TndQuantity").val());
            value = cost * qty;

            if (isNaN(value) || value == "")
                value = 0;
            $(item).text(value.toFixed(3));
            totalCost += value;
        });
        $(".totalWtRow").find('td.TendTotalTotCost').text(totalCost.toFixed(3));
        $(".totalWtRow").find('td.TendTotIndCost').text(totalCost.toFixed(3));

        SetSalesCost();
    }

    function SetSalesCost() {
        var elements, qty, qtyBO, cost, totalCost = 0, value, parentItem, finalTotalInd = 0, finalTotalItaly = 0, euroToInr = 0, finalTotalBO = 0;
        if (tndMarkupDetails.filter(x => x.MarkupId == 27).length > 0) {
            finalTotalInd =Number(tndMarkupDetails.filter(x => x.MarkupId == 27)[0].IndiaVal);
            finalTotalItaly = Number(tndMarkupDetails.filter(x => x.MarkupId == 27)[0].ItalyVal);
            finalTotalBO = Number(tndMarkupDetails.filter(x => x.MarkupId == 27)[0].BOVal);
        }

        if (currencyList.filter(x => (x.Name).toLowerCase() == "euro").length > 0) {
            euroToInr = Number(currencyList.filter(x => (x.Name).toLowerCase() == "euro")[0].Value);
        }

        $('.TenderDtlTable table').find('td.TendSalesCost').not(".exclude").each(function (index, item) {
            parentItem = $(item).parent();
            cost = Number($(parentItem).find(".TendIndCost").text());
            qtyBO = Number($(parentItem).find("#TndBOQty").val());
            qty = Number($(parentItem).find("#TndQuantity").val());
            value = (cost * finalTotalInd * finalTotalItaly) + (qtyBO * euroToInr * finalTotalBO);

            if (isNaN(value) || value == "")
                value = 0;
            $(item).text(value.toFixed(3));
            totalCost += value * qty;
        });
        $(".totalWtRow").find('td.TendTotSalesCost').text(totalCost.toFixed(3));

        SetSellingPrice();
    }

    function SetSellingPrice() {
        var elements, qty, cost, totalCost = 0, value, parentItem, totalMarginInd = 0, totalMarginItaly = 0, negotiationItaly = 0, usdPrice = 0, usdToInr = 0, totalCostUSD = 0,
            euroPrice = 0, euroToInr = 0, totalCostEURO = 0;

        if (tndMarkupDetails.filter(x => x.MarkupId == 31).length > 0) {
            totalMarginInd = Number(tndMarkupDetails.filter(x => x.MarkupId == 31)[0].IndiaVal);
            totalMarginItaly = Number(tndMarkupDetails.filter(x => x.MarkupId == 31)[0].ItalyVal);
        }

        if (tndMarkupDetails.filter(x => x.MarkupId == 32).length > 0) {
            negotiationItaly = Number(tndMarkupDetails.filter(x => x.MarkupId == 32)[0].ItalyVal);
        }

        if (currencyList.filter(x => (x.Name).toLowerCase() == "usd").length > 0) {
            usdToInr = Number(currencyList.filter(x => (x.Name).toLowerCase() == "usd")[0].Value);
            if (usdToInr == "" || isNaN(usdToInr))
                usdToInr = 0;
        }

        if (currencyList.filter(x => (x.Name).toLowerCase() == "euro").length > 0) {
            euroToInr = Number(currencyList.filter(x => (x.Name).toLowerCase() == "euro")[0].Value);
            if (euroToInr == "" || isNaN(euroToInr))
                euroToInr = 0;
        }

        $('.TenderDtlTable table').find('td.TendSellPriceINR').not(".exclude").each(function (index, item) {
            parentItem = $(item).parent();
            cost = Number($(parentItem).find(".TendSalesCost").text());
            qty = Number($(parentItem).find("#TndQuantity").val());
            value = (cost * (1 + (totalMarginItaly / 100)) * (1 + (totalMarginInd / 100))) / (1 - (negotiationItaly / 100));

            if (isNaN(value) || value == "")
                value = 0;

            if (Number(usdToInr) == 0 || isNaN(usdToInr)) {
                usdPrice = 0;
            }
            else {
                usdPrice = value / usdToInr;
            }

            if (Number(euroToInr) == 0 || isNaN(euroToInr)) {
                euroPrice = 0;
            }
            else {
                euroPrice = value / euroToInr;
            }

            $(item).text(value.toFixed(3));
            $(parentItem).find(".TendSellPriceUSD").text(usdPrice.toFixed(3));
            $(parentItem).find(".TendSellPriceEURO").text(euroPrice.toFixed(3));
            totalCost += value * qty;
            totalCostUSD += usdPrice * qty;
            totalCostEURO += euroPrice * qty;
        });
        $(".totalWtRow").find('td.TendTotSellPriceINR').text(totalCost.toFixed(3));
        $(".totalWtRow").find('td.TendTotSellPriceUSD').text(totalCostUSD.toFixed(3));
        $(".totalWtRow").find('td.TendTotSellPriceEURO').text(totalCostEURO.toFixed(3));

        value = totalCostUSD.toFixed(3) * usdToInr;

        $(".totalWtINRRow").find('td.TendTotSellPriceRs').text(value.toFixed(3));
        $(".totalWtCrRow").find('td.TendTotSellPriceCr').text((value / 10000000).toFixed(3));

        value = totalCostEURO.toFixed(3) * euroToInr;

        $(".totalWtINRRow").find('td.TendTotSellPriceEURORs').text(value.toFixed(3));
        $(".totalWtCrRow").find('td.TendTotSellPriceEUROCr').text((value / 10000000).toFixed(3));
        SetOtherCurrencySellingPrice();
        SetPortUnitPrice();
    }

    function SetOtherCurrencySellingPrice() {
        var elements, qty, cost, totalCost = 0, value, parentItem, totalMarginInd = 0, totalMarginItaly = 0, negotiationItaly = 0, otherCurrencyPrice = 0, currencyToInr = 0, totalCostOtherCurrency = 0,currencyName="";

        if (tndMarkupDetails.filter(x => x.MarkupId == 31).length > 0) {
            totalMarginInd = Number(tndMarkupDetails.filter(x => x.MarkupId == 31)[0].IndiaVal);
            totalMarginItaly = Number(tndMarkupDetails.filter(x => x.MarkupId == 31)[0].ItalyVal);
        }

        if (tndMarkupDetails.filter(x => x.MarkupId == 32).length > 0) {
            negotiationItaly = Number(tndMarkupDetails.filter(x => x.MarkupId == 32)[0].ItalyVal);
        }
        $.each(otherCurrencies, function (count, currency) {
            currencyName = currency.Name.toLowerCase();
            if (currencyList.filter(x => (x.Name).toLowerCase() == currencyName).length > 0) {
                currencyToInr = Number(currencyList.filter(x => (x.Name).toLowerCase() == currencyName)[0].Value);
                if (currencyToInr == "" || isNaN(currencyToInr))
                    currencyToInr = 0;
            }

            $('.TenderDtlTable table').find('td.TendSellPriceINR').not(".exclude").each(function (index, item) {
                parentItem = $(item).parent();
                cost = Number($(parentItem).find(".TendSalesCost").text());
                qty = Number($(parentItem).find("#TndQuantity").val());
                value = (cost * (1 + (totalMarginItaly / 100)) * (1 + (totalMarginInd / 100))) / (1 - (negotiationItaly / 100));

                if (isNaN(value) || value == "")
                    value = 0;

                if (Number(currencyToInr) == 0 || isNaN(currencyToInr)) {
                    otherCurrencyPrice = 0;
                }
                else {
                    otherCurrencyPrice = value / currencyToInr;
                }

                $(item).text(value.toFixed(3));
                $(parentItem).find(".TendSellPrice" + currencyName.toUpperCase()).text(otherCurrencyPrice.toFixed(3));
                totalCost += value * qty;
                totalCostOtherCurrency += otherCurrencyPrice * qty;
            });
            //$(".totalWtRow").find('td.TendTotSellPriceINR').text(totalCost.toFixed(3));
            $(".totalWtRow").find('td.TendTotSellPrice' + currencyName.toUpperCase()).text(totalCostOtherCurrency.toFixed(3));

            value = totalCostOtherCurrency.toFixed(3) * currencyToInr;

            $(".totalWtINRRow").find('td.TendTotSellPrice' + currencyName.toUpperCase() + 'Rs').text(value.toFixed(3));
            $(".totalWtCrRow").find('td.TendTotSellPrice' + currencyName.toUpperCase() + 'Cr').text((value / 10000000).toFixed(3));
        });
       // SetPortUnitPrice();
    }

    function SetTotalBO() {
        var qty, totalBO = 0,boQty;
        $('.TenderDtlTable table').find('td.TendBO').not(".exclude").each(function (index, item) {
            parentItem = $(item).parent();
            boQty = Number($(item).find("#TndBOQty").val());
            qty = Number($(parentItem).find("#TndQuantity").val());
            value = boQty * qty;

            if (isNaN(value) || value == "")
                value = 0;

            totalBO += value;
        });
        $(".totalWtRow").find('td.TendTotBO').text(totalBO.toFixed(3));
    }

    function SetPortUnitPrice() {
        var portFreight = 0, totSellingPriceINR, sellingPrice, seaFreight, value, totalPortUnitPrice = 0, parentItem, currencyValue;

        totSellingPriceINR = Number($(".TendTotSellPriceINR").text());
        console.log('TotalSPI', totSellingPriceINR);
        $.each(tndPorts, function (index, item) {
            if (portFrtDetails.filter((x) => x.Description == "OverallTotal" && x.PortId == Number(item.PortId)).length > 0) {
                portFreight =Number(portFrtDetails.filter((x) => x.Description == "OverallTotal" && x.PortId == Number(item.PortId))[0].Cost);
            }
            seaFreight = Number(Math.ceil((portFreight / totSellingPriceINR) * 100).toFixed(3));
            debugger;
            if (seaFreight == Infinity)
                seaFreight = 0;
            $('.TenderDtlTable table').find('td.TendUnitPrice[portid="' + item.PortId + '"]').not(".exclude").each(function (index, ele) {
                parentItem = $(ele).parent();
                currencyValue = Number($(ele).attr("currencyvalue"));
                if (currencyValue != 0)
                    sellingPrice = Number(Math.ceil(Number($(parentItem).find(".TendSellPriceINR").text()) / currencyValue).toFixed(1));
                else
                    sellingPrice = 0;

                value = Number((sellingPrice * (1 + (seaFreight / 100))).toFixed(1));

                if (isNaN(value) || value == "")
                    value = 0;

                totalPortUnitPrice += value * Number($(parentItem).find("#TndQuantity").val());
                $(ele).text(value);
                console.log('VAL', value);
            });
            value = totalPortUnitPrice.toFixed(3) * currencyValue;
            $(".totalWtRow").find('td.TendTotUnitPrice[portid="' + item.PortId + '"]').text(totalPortUnitPrice.toFixed(3));
            $(".totalWtINRRow").find('td.TendTotUnitPrice[portid="' + item.PortId + '"]').text(value.toFixed(3));
            $(".totalWtCrRow").find('td.TendTotUnitPrice[portid="' + item.PortId + '"]').text((value/10000000).toFixed(3));
            totalPortUnitPrice = 0;
        });
    }

    $("#btnSubmit").click(function () {
        var array = JSON.stringify(tndQtyDetails);
        var tndId = $("#tndId").val();
        var tndRevId = $("#tndRevId").val();
        isControlChanged = false;
        $.ajax({
            type: "post",
            data: { qtyDetails: array, tndId: tndId, tndRevId: tndRevId },
            url: '/IntTenderPricingKT/SaveTenderQty',
            success: function (data) {
                if (data) {
                    $(".modal").modal('hide');
                    successModal();
                    window.location.reload();
                }
                else {
                    failureModal();
                }
            },
            error: function (courses) {
                failureModal();
            }
        });
    })

    $("#btnCancelRev").click(function () {
        $.ajax({
            type: "post",
            url: '/TenderPricing/CancelTenderRev?tndId=' + $("#tndId").val() + '&tndRevId=' + $("#tndRevId").val(),
            success: function (data) {
                if (data) {
                    window.location.href = "/TenderList/GetInternationTenders";
                }
                else {
                    failureModal();
                }
            },
            error: function (courses) {
                failureModal();
            }
        });
    })

    $("#btnPublish").click(function () {
        if (isControlChanged) {
            ShowSnackBar("Please save changes before proceeding further");
            return false;
        }

        var obj = CheckPublish();

        if (!obj.Flag) {
            ShowSnackBar("Please fill " + obj.Message + " details");
            return false;
        }

        var tndId = $("#tndId").val();
        var tndRevId = $("#tndRevId").val();
        $.ajax({
            type: 'POST',
            url: '/TenderPricing/PublishTender',
            data: { tndId: tndId, tndRevId: tndRevId },
            dataType: 'JSON',
            success: function (data) {
                ShowSnackBar("Tender Published Successfully.");
                var redirectURL = "/IntTenderPricingKT/ViewTenderDetailsDom?enqId=" + $("#hidEnqId").val() + "&bomId=" + $("#bomId").val() + "&revNo=" + $("#revisionId").val() + "&tndId=" + $("#tndId").val() + "&tndRevNo=" + $("#tndRevId").val();
                var delay = 2000;
                setTimeout(function () { window.location.href = redirectURL; }, delay);

            },
            error: function (courses) {
                ShowSnackBar("Error while publishing tender.");
                //  failureModal();
            }
        });
    });

    function CheckPublish() {
        var data =  {};
        var tndId = $("#tndId").val();
        var tndRevId = $("#tndRevId").val();
        $.ajax({
            type: 'POST',
            url: '/intTenderPricingKt/CheckPublish',
            data: { tndId: tndId, tndRevId: tndRevId },
            dataType: 'JSON',
            async: false,
            success: function (obj) {
                data = obj
            },
            error: function (courses) {
                ShowSnackBar("Error while publishing tender.");
                //  failureModal();
            }
        });
        return data;
    }

    function SubmitMarkup() {

        var redirectURL;
        redirectURL = "/IntTenderPricingKT/loadMarkupPricing?tndId=" + $("#tndId").val() + '&tndRevNo=' + $("#tndRevId").val();
        $.ajax({
            type: "post",
            url: redirectURL,
            dataType: "html",
            contentType: "application/x-www-form-urlencoded;charset=utf-8",
            async: false,
            success: function (data) {
                $("#testDiv").remove();
                $("body").append("<div id='testDiv' style='display:none;'></div>");
                $("#testDiv").append(data);
                $("#testDiv").find("#btnSubmitMarkup").click();
            },
            error: function (courses) { }
        });
    }

    function SubmitFreight() {
        var redirectURL;
        redirectURL = "/IntTenderPricingKT/loadFreightCharges?tndId=" + $("#tndId").val() + '&tndRevNo=' + $("#tndRevId").val();
        $.ajax({
            type: "post",
            url: redirectURL,
            dataType: "html",
            contentType: "application/x-www-form-urlencoded;charset=utf-8",
            async: false,
            success: function (data) {
                $("#testDiv").remove();
                $("body").append("<div id='testDiv' style='display:none;'></div>");
                $("#testDiv").append(data);
                $("#testDiv").find("#btnSubmitFreight").click();
            },
            error: function (courses) { }
        });
    }

    function SubmitTestPrice() {
        var redirectURL;
        redirectURL = "/IntTenderPricing/LoadTestPricing?tndId=" + $("#tndId").val() + '&tndRevNo=' + $("#tndRevId").val();
        $.ajax({
            type: "post",
            url: redirectURL,
            dataType: "html",
            contentType: "application/x-www-form-urlencoded;charset=utf-8",
            async: false,
            success: function (data) {
                $("#testDiv").remove();
                $("body").append("<div id='testDiv' style='display:none;'></div>");
                $("#testDiv").append(data);
                $("#testDiv").find("#btnTndSaveForm").click();
            },
            error: function (courses) { }
        });
    }

</script>
