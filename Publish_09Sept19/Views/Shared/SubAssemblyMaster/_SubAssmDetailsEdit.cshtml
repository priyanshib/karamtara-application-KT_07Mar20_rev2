@model Karamtara_Application.Models.SubAssemblyMasterModel
@{
    int count = 1;
}
@using (Html.BeginForm("EditSubAssembly", "SubAssemblyMaster", FormMethod.Post, new { @id = "SubAssemlyMasterForm" }))
{
    <div class="Catgdetails tableBlock">
        <div class="row">
            <div class="fixedTableLayout">
                <table class="table CatgdetailsTable mb-5">
                    <tr>
                        <th class="catNo">Cat. No</th>
                        <th class="productNm">Product</th>
                        <th class="compoentNm">Component </th>
                        <th class="rawMater">Raw Material</th>
                        <th class="drawNo" >Drawing No</th>
                        <th class="matGrid">Material Grade</th>
                        <th class="compSize">Size</th>
                        <th class="compoQty">Quantity</th>
                        <th class="proUnigr">Unit Gross Weight<br />(KG)</th>
                        <th class="proUninet">Unit Net Weight<br />(KG)</th>
                    </tr>

                    <tr class="catDtlsHead">
                        <td class="catNo">
                            <span class="tooltipHover c-pointer">
                                @Html.TextBoxFor(x => Model.CatalogueNo, null, new { @readonly = "readonly", @id = "txtCatalogue", @class = "c-pointer" })
                                <span class="tooltipShow">@Model.CatalogueNo</span>
                            </span>
                        </td>
                        <td class="productNm">
                            <span class="tooltipHover c-pointer">
                                @Html.TextBoxFor(x => Model.SubAssemblyName, null, new { @readonly = "readonly", @id = "txtSubAssmName", @class = "c-pointer" })
                                <span class="tooltipShow">@Model.SubAssemblyName</span>
                            </span>
                        </td>
                        <td class="compoentNm">@Html.TextBoxFor(x => Model.SubAssemblyId, null, new { @style = "display:none", @id = "hidSubAssmId" })</td>
                        <td class="rawMater"></td>
                        <td class="rawMater">
                            <span class="tooltipHover c-pointer">
                                @Html.TextBoxFor(x => Model.DrawingNo, null, new { @readonly = "readonly", @id = "drawingNum" ,@class= "c-pointer" })
                                <span class="tooltipShow">@Model.DrawingNo</span>
                            </span>
                        </td>
                        <td class="rawMater"></td>
                        <td class="rawMater"></td>
                        <td class="prodNo"></td>
                        <td class="prodUnit"></td>
                        <td class="prodUnit"></td>
                    </tr>

                    @foreach (var item in Model.ComponenetList)
                    {
                        <tr>
                            <td class="catNo"></td>
                            <td class="productNm">@Html.HiddenFor(x => item.ComponentId, new { @style = "display:none", @id = "componentId_" + count }) </td>
                            <td class="compoentNm">
                                <span class="tooltipHover c-pointer">
                                    @Html.TextBoxFor(x => item.ComponentName, null, new { @class = "Editable autocomp c-pointer", @readonly = "readOnly", required = "required", @data_val = "" + count })
                                    <span class="tooltipShow">@item.ComponentName</span>
                                </span>
                            </td>
                            <td class="rawMater">
                                <span class="tooltipHover c-pointer">
                                    @Html.TextBoxFor(x => item.RawMaterial, null, new { @readonly = "readOnly", required = "required", @id = "RawMaterial_" + count, @class = "c-pointer" })
                                    <span class="tooltipShow">@item.RawMaterial</span>
                                </span>
                            </td>
                            <td class="rawMater">
                                <span class="tooltipHover c-pointer">
                                    @Html.TextBoxFor(x => item.DrawingNo, null, new { @readonly = "readOnly", required = "required", @id = "DrawingNo_" + count,@class= "c-pointer" })
                                    <span class="tooltipShow">@item.DrawingNo</span>
                                </span>

                            </td>
                            <td class="rawMater">@Html.TextBoxFor(x => item.MaterialGrade, null, new { @readonly = "readOnly", required = "required", @id = "MaterialGrade_" + count })</td>
                            <td class="rawMater">
                                <span class="tooltipHover c-pointer">
                                    @Html.TextBoxFor(x => item.Size, null, new { @readonly = "readOnly", required = "required", @id = "Size_" + count, @class = "text-center c-pointer" })
                                    <span class="tooltipShow">@item.Size</span>
                                </span>
                            </td>
                            <td class="prodNo txtCenterTD">@Html.TextBoxFor(x => item.Qty, null, new { @class = "Editable", @readonly = "readOnly", @required = "required", id = "Quantity_" + count })</td>
                            <td class="prodUnit txtCenterTD">@Html.TextBoxFor(x => item.UnitGrWt, null, new { @readonly = "readOnly", @id = "GrossWt_" + count })</td>
                            <td class="prodUnit txtCenterTD">@Html.TextBoxFor(x => item.UnitNetWt, null, new { @readonly = "readOnly", @id = "NetWt_" + count })</td>
                        </tr>
                        count++;
                    }
                </table>
                @*<div class="col-sm-12 text-right">
            <button type="button" class="submitBomBtn saveBtn AddRow" id="AddRowEdit" style="display:none">Add More Rows</button>
        </div>*@
                <div class="saveProddtls saveAssblProd">
                    <button type="button" class="submitBomBtn saveBtn opacityBtnyelow" id="btnEdit">edit</button>
                    <button type="button" class="submitBomBtn saveBtn AddRow opacityBtnyelow" id="AddRowEdit" style="display:none">Add More Rows</button>
                    <button type="button" class="submitBomBtn saveBtn opacityBtnyelow" id="btnDel" onclick="DeleteSubAssembly('@Model.SubAssemblyId')" ;>Delete</button>
                    <button type="button" class="submitBomBtn publishBtn opacityBtngreen" style="display:none" id="btnCancel">Cancel </button>
                    <button type="button" class="submitBomBtn publishBtn opacityBtngreen" style="display:none" id="btnSave">Save </button>
                </div>
            </div>
            </div>
    </div>
}
<script>

    function DeleteSubAssembly(subAssmId) {
        if (confirm("Are you sure you want to delete this subassembly? This action cannot be undone"))
            {
                $.ajax({
                    type: 'POST',
                    url: "/SubAssemblyMaster/DeleteSubAssembly",
                    data: { subAssmId: subAssmId },
                    dataType: 'json',
                    success: function (data) {
                        if (data == true || data == 'true') {
                            alert('SubAssembly Deleted Successfully');
                            window.location.reload();
                        }
                        else {
                            alert('SubAssembly Deleted Failed. Please contact your System Admin');
                            window.location.reload();
                        }
                    }
                });
        }
    }

    $(document).ready(function () {
    
    $("#btnEdit").click(function () {
        $(".Editable").removeAttr("readonly");
        $(".Editable").addClass('whiteBgInput');
        $("#btnEdit").attr("style", "display:none");
        $("#btnCancel").removeAttr("style", "display:none");
        $("#btnSave").removeAttr("style", "display:none");
        $("#AddRowEdit").removeAttr("style", "display:none");
        $("#btnDel").attr("style", "display:none");
        
        AutoCompletePopulate();
        });

        

    $("#btnCancel").click(function () {
        if (confirm("Are you sure you want to cancel? All unsaved changes will be lost")) {
            window.location.reload();
        }
    });

        $(".AddRow").click(function () { 
            var rowCount = $('.CatgdetailsTable tr').length - 2;
            $.each(new Array(5), function (temp) {
                var newCount = rowCount + temp + 1;
             $('.CatgdetailsTable tr:last')
                 .after('<tr><td class="test1">@Html.TextBox("CatId", null, new { @class = "test2" })</td>' +
                     '<td><input type="text" name="SumAssmName"></td>' +
                 '<td><input type="text" name="item.ComponentName" class = "Editable autocomp whiteBgInput" data-val = ' + newCount + '> <input type="hidden" name="item.ComponentId" style="display:none" id = componentId_'+newCount+'></td>' +
                 '<td><input type="text" name="item.RawMaterialId" id = RawMaterial_' + newCount + ' readonly="readonly"></td>' +
                 '<td><input type="text" name="item.DrawingNo" id = DrawingNo_' + newCount + ' readonly="readonly"></td>' +
                 '<td><input type="text" name="item.Grade" id = MaterialGrade_' + newCount + ' readonly="readonly"></td>' +
                 '<td><input type="text" name="item.Size" id = Size_' + newCount + ' readonly="readonly" class="text-center"></td>' +
                 '<td><input type="text" name="item.Qty" id = Quantity_' + newCount + ' class = "Editable whiteBgInput text-center"></td>' +
                 '<td><input type="text" name="item.UnitGrWt" id = GrossWt_' + newCount + ' readonly="readonly"></td>' +
                 '<td><input type="text" name="item.UnitNetWt" id = NetWt_' + newCount + ' readonly="readonly"></td></tr>');
                //newcCount++;
         });
         AutoCompletePopulate();
    });

        $("#btnSave").click(function () {
            var form = $("#SubAssemlyMasterForm").serialize();
        $.ajax({
            type: 'POST',
            url: "/SubAssemblyMaster/EditSubAssembly",
            data: form,
            dataType: 'json',
            success: function (data) {
                if (data > 0) {
                    editSuccess(data);
                    $(".Editable").attr("readonly", "readonly");
                    $("#btnEdit").removeAttr("style", "display:none");
                    $("#btnCancel").attr("style", "display:none");
                    $("#btnSave").attr("style", "display:none");
                    
                }   
                else {
                    editFailure();
                }
            }
        });
    });

    function AutoCompletePopulate() {

        var autoData = null;

            $.ajax({
                type: 'get',
                url: "/SubAssemblyMaster/GetComponents",
                dataType: 'json',
                success: function (data) {
                    autoData = $.map(data, function (item) {
                        return { label: item.ComponentName, value: item.ComponentId }
                    });
                    autoC(autoData, data);
                    
                },
                error: function (response) {
                }
            });

            function autoC(temp, ogData) {
                $(".autocomp").autocomplete({
                    minlength: 1,
                    source: temp,
                    select: function (event, ui) {
                        var dataAttrib = $(this).attr('data-val');
                        var subId = ui.item.value;
                        $(this).val(ui.item.label);
                        AutoFillSelectedRow(dataAttrib, subId, ogData);
                        return false;
                    },
                    change: function (event, ui) {
                        if (ui.item == null) {
                            $(this).val("");
                            $(this).focus();
                            var dataAttrib = $(this).attr('data-val');
                            ClearRow(dataAttrib);
                        }
                    }
                });
                //}).focus(function () {
                //    $(this).autocomplete("search", "");
                //});
            };

            function AutoFillSelectedRow(num, subId, ogData) {
                var data = ogData;
                let obj = data.find(x => x.ComponentId == subId);
                $("#RawMaterial_" + num).val(obj.RawMaterial);
                $("#Size_" + num).val(obj.Size);
                $("#GrossWt_" + num).val(obj.UnitGrWt);
                $("#NetWt_" + num).val(obj.UnitNetWt);
                $("#componentId_" + num).val(subId);
                $("#DrawingNo_" + num).val(obj.DrawingNo);
                $("#MaterialGrade_" + num).val(obj.MaterialGrade);

            };

            function ClearRow(num) {
                $("#RawMaterial_" + num).val("");
                $("#Size_" + num).val("");
                $("#Quantity_" + num).val("");
                $("#GrossWt_" + num).val("");
                $("#NetWt_" + num).val("");
                $("#componentId_" + num).val("");
                $("#DrawingNo_" + num).val("");
                $("#MaterialGrade_" + num).val("");
            };
        };

        $('input').each(function (index) {
            if ($(this).val().length == 0) {
                // alert("valute is 0");
                $(this).closest(".tooltipHover").remove();
            }
        });


    });

</script>